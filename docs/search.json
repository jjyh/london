[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "londontime",
    "section": "",
    "text": "References:\nDashboards: Using R to create actionable science - 2  Dynamic: Quarto docs (tbep-tech.github.io)\nGeocoding via Python - pandas - Python generate lat/long points from address - Stack Overflow\nlibrary(crosstalk)\nlibrary(leaflet)\n\nWarning: package 'leaflet' was built under R version 4.3.3\n\nlibrary(leaflet.extras) #for geoloc\n\nWarning: package 'leaflet.extras' was built under R version 4.3.3\n\nlibrary(DT)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readxl)\nlibrary(tidyr)\nlibrary(reticulate)\n\nWarning: package 'reticulate' was built under R version 4.3.3\n.chart-wrapper {\n  overflow-x: scroll;\n}\n## import location data\ndt_loc &lt;- read_excel('data/locations.xlsx', col_names = TRUE, trim_ws=TRUE) %&gt;%  drop_na(Address)\ndt_loc$Address &lt;- paste0(dt_loc$Address, \", London, England\")\n\n#The crosstalk package can incorporate additional dynamic functionality in a Quarto document. As the name implies, it allows linking between plots and tables by including embedded Javascript in the rendered HTML file. This allows functionality that looks interactive as in a Shiny application, but does not require Shiny Server.\n\n#Because all data must be loaded into the browser, Crosstalk is not appropriate for large data sets. (There’s no hard limit, since HTML widgets require varying amounts of CPU cycles and memory for each data point."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#map",
    "href": "index.html#map",
    "title": "londontime",
    "section": "Map",
    "text": "Map\nCurrent legend: colour by category, dark inner dot = open late Todo\n1. add open-by-day layer control - completed 2. add hours by pop up\n3. Crosstalk with table - completed\n4. layer tube station\n\ndt_loc_py&lt;-py$dt_loc_py#[-1]#drop last column coz it's a mess\ndt_loc_py&lt;-dt_loc_py %&gt;% \n  rename(lng = longi)\ndt_loc_py$Category&lt;-as.factor(dt_loc_py$Category)\n# Create a palette that maps factor levels to colors\n# pal &lt;- colorFactor(c(\"pink\", \"turquoise\", \"blue\",  \"green\",\"purple\", \"orange\", \"gray\", \"black\"), domain = c(\"Food\", \"Sight\",\"Sight, Food\", \"Shop, sight\",\"Shop\", \"Activity\", \"Base\", \"NA\"))\npal&lt;-colorFactor(\"Dark2\", dt_loc_py$Category) #use colourBrewer\n\nmap&lt;-dt_loc_py %&gt;% \n  leaflet::leaflet() %&gt;%\n  leaflet::addProviderTiles(providers$OpenStreetMap.HOT)%&gt;% #Thunderforest.Transport is better but not loadiing...api key needed?\n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Saturday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Saturday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Sunday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Sunday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Monday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Monday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Tuesday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Tuesday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Wednesday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Wednesday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Thursday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Thursday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(dt_loc_py, !is.na(Friday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Friday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addLegend(pal = pal, values = ~Category, position = \"bottomleft\") %&gt;%\n  addLayersControl(overlayGroups = c(\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"),\n                   options = layersControlOptions(collapsed = FALSE))\n\n#add night\nmap &lt;- map %&gt;% \n  addMarkers(data = subset(dt_loc_py, !is.na(Late)),\n                    lng = ~lng, lat = ~lat,\n                    icon = ~icons('data/moon-outline.svg',iconWidth = 15, iconHeight = 15),\n                    popup = ~Late)\n#add geoloc\nmap &lt;- map %&gt;% \n  addControlGPS(\n  options = gpsOptions(\n    position = \"topleft\",\n    activate = TRUE, \n    autoCenter = TRUE,\n    setView = TRUE))\n\nactivateGPS(map)\n\n\n\n\n#https://rpubs.com/mattdray/basic-leaflet-maps\n\n  # leaflet::addLayersControl(\n  #   overlayGroups = c(\"Outstanding\", \"Good\", \"Other\"),  # add these layers\n  #   options = layersControlOptions(collapsed = FALSE)  # expand on hover?\n  # ) %&gt;% \n  # hideGroup(c(\"Good\", \"Other\"))  # turn these off by default\n  #  \n  #leaflet::addAwesomeMarkers\n\n\nsd &lt;- SharedData$new(dt_loc_py)\n\n\n# create a filter input\n# filter_slider(\"chla\", \"Chlorophyll-a\", sd, column=~chla, step=0.1, width=250)\n\n# use shared data with crosstalk widgets\n\ntbl_loc &lt;-   sd %&gt;% \n  DT::datatable(\n    filter = \"top\",  # allows filtering on each column\n    extensions = c(\n      \"Buttons\",  # add download buttons, etc\n      'FixedColumns'\n      #\"Scroller\"  # for scrolling down the rows rather than pagination\n    ),\n    rownames = FALSE,  # remove rownames\n    style = \"bootstrap\",\n    class = \"compact\",\n    width = \"100%\",\n    options = list(\n      dom = \"Blrtip\",  # specify content (search box, etc)\n      deferRender = TRUE,\n      pageLength = 10,\n      scrollY = 500,\n      fixedColumns = list(leftColumns = 1), #lock column\n      fixedHeader = TRUE, #lock header\n      scroller = TRUE,\n      buttons = list(\n        I(\"colvis\"),  # turn columns on and off\n        \"csv\",  # download as .csv\n        \"excel\"  # download as .xlsx\n      )\n    )\n  )\n\nmap &lt;- leaflet(sd, width = \"100%\", height = 350) %&gt;% \n  leaflet::addProviderTiles(providers$OpenStreetMap.HOT)%&gt;%\n  addCircleMarkers(data = subset(sd$data(), !is.na(Saturday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Saturday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category))  %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Sunday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Sunday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Monday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Monday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Tuesday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Tuesday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Wednesday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Wednesday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Thursday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Thursday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addCircleMarkers(data = subset(sd$data(), !is.na(Friday)),\n                   lng = ~lng, lat = ~lat, \n                   group = \"Friday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category)) %&gt;% \n  addLegend(pal = pal, values = ~Category, position = \"bottomleft\") %&gt;%\n  addLayersControl(overlayGroups = c(\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"),\n                   options = layersControlOptions(collapsed = FALSE)) %&gt;% \n  addMarkers(data = subset(sd$data(), !is.na(Late)),\n                    lng = ~lng, lat = ~lat,\n                    icon = ~icons('data/moon-outline.svg',iconWidth = 20, iconHeight = 15),\n                    popup = ~Late)\n\n# 12 is the maximum number of columns in crosstalk::bscols(). This means that you can put every widget on next row just by specifying widths = 12 for the previous one."
  }
]