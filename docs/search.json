[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "londontime",
    "section": "",
    "text": "References:\nDashboards: Using R to create actionable science - 2  Dynamic: Quarto docs (tbep-tech.github.io)\nGeocoding via Python - pandas - Python generate lat/long points from address - Stack Overflow\n\nlibrary(crosstalk)\nlibrary(leaflet)\n\nWarning: package 'leaflet' was built under R version 4.3.3\n\nlibrary(DT)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readxl)\nlibrary(tidyr)\nlibrary(reticulate)\n\nWarning: package 'reticulate' was built under R version 4.3.3\n\n\n\n#The crosstalk package can incorporate additional dynamic functionality in a Quarto document. As the name implies, it allows linking between plots and tables by including embedded Javascript in the rendered HTML file. This allows functionality that looks interactive as in a Shiny application, but does not require Shiny Server.\n\n\n# import water quality data\n#tbwqdat &lt;- read.csv('https://github.com/tbep-tech/shiny-workshop/raw/main/data/tbwqdat.csv') %&gt;% \n#  filter(mo == 7)\n\n## import location data\ndt_loc &lt;- read_excel('data/locations.xlsx', col_names = TRUE, trim_ws=TRUE) %&gt;%  drop_na(Address)\ndt_loc$Address &lt;- paste0(dt_loc$Address, \", London, England\")\n\ndt_loc%&gt;% \n  DT::datatable(\n    filter = \"top\",  # allows filtering on each column\n    extensions = c(\n      \"Buttons\",  # add download buttons, etc\n      \"Scroller\"  # for scrolling down the rows rather than pagination\n    ),\n    rownames = FALSE,  # remove rownames\n    style = \"bootstrap\",\n    class = \"compact\",\n    width = \"100%\",\n    options = list(\n      dom = \"Blrtip\",  # specify content (search box, etc)\n      deferRender = TRUE,\n      scrollY = 300,\n      scroller = TRUE,\n      buttons = list(\n        I(\"colvis\"),  # turn columns on and off\n        \"csv\",  # download as .csv\n        \"excel\"  # download as .xlsx\n      )\n    )\n  )\n\n\n\n\n\nBefore using python\nYou have to discover the path to your the .exe python file and then specify it in the .Renviron file.\n\nSys.setenv(RETICULATE_PYTHON = “C:\\ProgramData\\Anaconda3”)\nSys.setenv(RETICULATE_PYTHON = \"C:/Users/hoja/AppData/Local/anaconda3\")\nlibrary(reticulate)\nrepl_python()\n\n\nimport pandas as pd\nfrom geopy.geocoders import Nominatim #had to pip install this first\n\n#Using Nominatim with the default user_agent is strongly discouraged, as it violates Nominatim’s Usage Policy https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please make sure to specify a custom user_agent with Nominatim(user_agent=\"my-application\")\ngeolocator = Nominatim(user_agent=\"myApp\")\n\ndt_loc_py = r.dt_loc #import df from R to Py https://nrennie.rbind.io/blog/combining-r-and-python-with-reticulate-and-quarto/\n\n#claims to have no attribute latitude\n# dt_loc_py[['location_lat', 'location_long']] = dt_loc_py['Address'].apply(geolocator.geocode).apply(lambda x: pd.Series([x.latitude, x.longitude], index=['location_lat', 'location_long']))\n\n# dt_loc_py[['location']] = dt_loc_py['Address'].apply(geolocator.geocode) # this doesn't work unless all addresses can be found - number will mismatch\n\n#this works\n# geolocator.geocode(dt_loc_py['Address'][1])\n# geolocator.geocode(dt_loc_py['Address'][1]).latitude\n# geolocator.geocode(dt_loc_py['Address'][1]).longitude\n\n\nlat = []\nlongi = []\nlocation = []\n\nfor places in dt_loc_py['Address']:\n  location.append(geolocator.geocode(places, timeout=100))\n  lat.append(location[len(location)-1].latitude)\n  longi.append(location[len(location)-1].longitude)\n\n#match back to df\ndt_loc_py['lat'] = lat\ndt_loc_py['longi'] = longi\n\n\ndt_loc_py&lt;-py$dt_loc_py\ndt_loc_py&lt;-dt_loc_py %&gt;% \n  rename(lng = longi)\n\n# Create a palette that maps factor levels to colors\npal &lt;- colorFactor(c(\"pink\", \"turquoise\", \"purple\",  \"green\",\"yellow\"), domain = c(\"Food\", \"Sight\",\"Sight, Food\", \"Shop, sight\",\"Shop\"))\n\n\nmap&lt;-dt_loc_py %&gt;% \n  leaflet::leaflet() %&gt;%\n  leaflet::addProviderTiles(providers$OpenStreetMap)%&gt;%\n  addCircleMarkers(lng = ~lng, lat = ~lat, \n                   group = \"Saturday\",\n                   popup = ~Place,\n                   radius = 9,\n                   color = ~pal(Category),\n                   opacity = 0.7) %&gt;% \n  addLayersControl(overlayGroups = c(\"Saturday\"))\n\nWarning in pal(Category): Some values were outside the color scale and will be\ntreated as NA\n\nWarning in pal(Category): Some values were outside the color scale and will be\ntreated as NA\n\nmap %&gt;% \n  addCircles(data = subset(dt_loc_py, !is.na(Late)),\n                          lng = ~lng, lat = ~lat,\n                          popup = ~Late, \n                          radius = 3,\n                          opacity = 0.9)\n\n\n\n\n#https://rpubs.com/mattdray/basic-leaflet-maps\n\n  # leaflet::addLayersControl(\n  #   overlayGroups = c(\"Outstanding\", \"Good\", \"Other\"),  # add these layers\n  #   options = layersControlOptions(collapsed = FALSE)  # expand on hover?\n  # ) %&gt;% \n  # hideGroup(c(\"Good\", \"Other\"))  # turn these off by default\n  #  \n  #leaflet::addAwesomeMarkers\n\n\n# create shared data\nsd &lt;- SharedData$new(tbwqdat)\n\n# create a filter input\nfilter_slider(\"chla\", \"Chlorophyll-a\", sd, column=~chla, step=0.1, width=250)\n\n# use shared data with crosstalk widgets\nbscols(\n  leaflet(sd) %&gt;% \n    addTiles() %&gt;% \n    addMarkers(),\n  datatable(\n    sd, extensions = \"Scroller\", style=\"bootstrap\", class = \"compact\", width = \"100%\", rownames = F,\n    options =list(\n      scrollY = 300, scroller = TRUE, \n      columnDefs = list(\n        list(visible = F, targets = c(0:1, 4)),\n         list(className = 'dt-left', targets = '_all'))\n      ),\n      colnames = c('lat', 'lon', 'Bay segment', 'Station', 'mo', 'Chl-a (ug/L)')\n    )\n  )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]